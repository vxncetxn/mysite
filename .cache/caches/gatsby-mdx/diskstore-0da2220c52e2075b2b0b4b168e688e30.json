{"expireTime":9007200817039880000,"key":"gatsby-mdx-entire-payload-cadf82bf09f3e71fce121ad0a9a84c75-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"IntroPara","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":12,"offset":12},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":12,"offset":12},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An icon button is an icon that triggers some sort of action on the page. More accurately, technically speaking, an icon button is a button that contains an icon and no (visible) accompanying text. These buttons can be found in the majority of app and user interfaces today. The infamous hamburger menu button is a great example of such buttons when not visually labelled “Menu”.","position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":379,"offset":392},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":379,"offset":392},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Emphasis Para","position":{"start":{"line":6,"column":1,"offset":394},"end":{"line":6,"column":14,"offset":407},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":394},"end":{"line":6,"column":14,"offset":407},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Rest of Paras","position":{"start":{"line":8,"column":3,"offset":411},"end":{"line":8,"column":16,"offset":424},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":409},"end":{"line":8,"column":16,"offset":424},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Putting aside the UX side of the coin and whether or not an icon alone is enough to convey meaning and functionality to users, many implementations of these buttons today lack the proper accessibility that makes them meaningful to users of assistive technologies.","position":{"start":{"line":10,"column":1,"offset":426},"end":{"line":10,"column":264,"offset":689},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":426},"end":{"line":10,"column":264,"offset":689},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While the seemingly popular aria-label is a perfectly valid way to add an accessible name to a button (and/or other components), it is certainly not the only way, let alone the best. You could always just put text in it, for example. But what if the designer or the UI enforces the absence of visual text next to an icon?","position":{"start":{"line":12,"column":1,"offset":691},"end":{"line":12,"column":322,"offset":1012},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":691},"end":{"line":12,"column":322,"offset":1012},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is a handful of ways that an icon button can be implemented accessibly. This article is an overview of them all.","position":{"start":{"line":14,"column":1,"offset":1014},"end":{"line":14,"column":119,"offset":1132},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1014},"end":{"line":14,"column":119,"offset":1132},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Accessible Button Names","position":{"start":{"line":16,"column":4,"offset":1137},"end":{"line":16,"column":27,"offset":1160},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1134},"end":{"line":16,"column":27,"offset":1160},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A button is announced to screen readers as a button when the proper element — the almighty button is used, or when an element has a role = \"button\" on it. Either way, when a button is announced as one, users expect to be able to interact with it in a certain way, which includes being able to activate the button using either the ENTER or SPACE keys.","position":{"start":{"line":18,"column":1,"offset":1162},"end":{"line":18,"column":351,"offset":1512},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1162},"end":{"line":18,"column":351,"offset":1512},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This means that if you choose not to use the native button element, you’ll need to reimplement that native behavior and functionality yourself using JavaScript. But who would want to create a brittle implementation of features that are provided to them by default by the browser when they can save both time and effort using a simple button, right? ;)","position":{"start":{"line":20,"column":1,"offset":1514},"end":{"line":20,"column":352,"offset":1865},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1514},"end":{"line":20,"column":352,"offset":1865},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inspecting the Button Name in Chrome Devtools","position":{"start":{"line":22,"column":4,"offset":1870},"end":{"line":22,"column":49,"offset":1915},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1867},"end":{"line":22,"column":49,"offset":1915},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To inspect what the accessible name of a button is and, therefore, how it will be announced by a screen reader, you can use the Chrome devtools. Next to the Style tab, you’ll find an “Accessibility“ tab, inside which you will find something that looks like this:","position":{"start":{"line":24,"column":1,"offset":1917},"end":{"line":24,"column":263,"offset":2179},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1917},"end":{"line":24,"column":263,"offset":2179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The accessible name for the button can be defined in several ways, as you can see in the image above. When you put plain text inside the button, that text content can then be used as a name for the button, which is then announced: \"Send Message, Button\" by VoiceOver.","position":{"start":{"line":26,"column":1,"offset":2181},"end":{"line":26,"column":268,"offset":2448},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2181},"end":{"line":26,"column":268,"offset":2448},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can inspect the button below yourself and check the accessible name in the devtools, and fire up your screen reader of choice to see how it is announced.","position":{"start":{"line":28,"column":1,"offset":2450},"end":{"line":28,"column":158,"offset":2607},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2450},"end":{"line":28,"column":158,"offset":2607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, what happens when we have an icon inside the button?","position":{"start":{"line":30,"column":1,"offset":2609},"end":{"line":30,"column":58,"offset":2666},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2609},"end":{"line":30,"column":58,"offset":2666},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Icon Sitting Next to Text","position":{"start":{"line":32,"column":4,"offset":2671},"end":{"line":32,"column":29,"offset":2696},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2668},"end":{"line":32,"column":29,"offset":2696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This post is about icon-only buttons. But it’s worth starting with buttons that contain an icon sitting next to some text.","position":{"start":{"line":34,"column":1,"offset":2698},"end":{"line":34,"column":123,"offset":2820},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2698},"end":{"line":34,"column":123,"offset":2820},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When a button contains text, that text is going to be used to create an accessible name for the button. That text should usually be enough to convey what the button does to screen readers.","position":{"start":{"line":36,"column":1,"offset":2822},"end":{"line":36,"column":189,"offset":3010},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2822},"end":{"line":36,"column":189,"offset":3010},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As such, the icon itself (an svg image) could become irrelevant to screen reader users, as it does not clarify or add to the accessible name of the button. As such, the common practice is to hide it from screen readers using aria-hidden:","position":{"start":{"line":38,"column":1,"offset":3012},"end":{"line":38,"column":238,"offset":3249},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":3012},"end":{"line":38,"column":238,"offset":3249},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Code Block","position":{"start":{"line":40,"column":1,"offset":3251},"end":{"line":40,"column":11,"offset":3261},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":3251},"end":{"line":40,"column":11,"offset":3261},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The aria-hidden attribute is used to indicate whether an element is exposed to screen readers or not. When set to “true”, the element and its contents are hidden from the accessibility API, regardless of whether or not it is visually displayed.","position":{"start":{"line":42,"column":1,"offset":3263},"end":{"line":42,"column":245,"offset":3507},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":3263},"end":{"line":42,"column":245,"offset":3507},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The svg also has a focusable attribute set to false which prevents the icon itself from receiving focus in IE, because otherwise the button will have two Tab stops, which is not the expected or desired behavior.","position":{"start":{"line":44,"column":1,"offset":3509},"end":{"line":44,"column":212,"offset":3720},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":3509},"end":{"line":44,"column":212,"offset":3720},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Accessible Icon Buttons\",\"slug\":\"writing/accesssible-icon-button\",\"tags\":\"javascript markup\",\"published\":\"5 July 2019\"}","position":{"start":{"line":47,"column":1,"offset":3723},"end":{"line":47,"column":158,"offset":3880},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":47,"column":158,"offset":3880}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"Accessible Icon Buttons\",\"slug\":\"writing/accesssible-icon-button\",\"tags\":\"javascript markup\",\"published\":\"5 July 2019\"}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`IntroPara`}</h1>\n    <p>{`An icon button is an icon that triggers some sort of action on the page. More accurately, technically speaking, an icon button is a button that contains an icon and no (visible) accompanying text. These buttons can be found in the majority of app and user interfaces today. The infamous hamburger menu button is a great example of such buttons when not visually labelled “Menu”.`}</p>\n    <p>{`Emphasis Para`}</p>\n    <h1>{`Rest of Paras`}</h1>\n    <p>{`Putting aside the UX side of the coin and whether or not an icon alone is enough to convey meaning and functionality to users, many implementations of these buttons today lack the proper accessibility that makes them meaningful to users of assistive technologies.`}</p>\n    <p>{`While the seemingly popular aria-label is a perfectly valid way to add an accessible name to a button (and/or other components), it is certainly not the only way, let alone the best. You could always just put text in it, for example. But what if the designer or the UI enforces the absence of visual text next to an icon?`}</p>\n    <p>{`There is a handful of ways that an icon button can be implemented accessibly. This article is an overview of them all.`}</p>\n    <h2>{`Accessible Button Names`}</h2>\n    <p>{`A button is announced to screen readers as a button when the proper element — the almighty button is used, or when an element has a role = \"button\" on it. Either way, when a button is announced as one, users expect to be able to interact with it in a certain way, which includes being able to activate the button using either the ENTER or SPACE keys.`}</p>\n    <p>{`This means that if you choose not to use the native button element, you’ll need to reimplement that native behavior and functionality yourself using JavaScript. But who would want to create a brittle implementation of features that are provided to them by default by the browser when they can save both time and effort using a simple button, right? ;)`}</p>\n    <h2>{`Inspecting the Button Name in Chrome Devtools`}</h2>\n    <p>{`To inspect what the accessible name of a button is and, therefore, how it will be announced by a screen reader, you can use the Chrome devtools. Next to the Style tab, you’ll find an “Accessibility“ tab, inside which you will find something that looks like this:`}</p>\n    <p>{`The accessible name for the button can be defined in several ways, as you can see in the image above. When you put plain text inside the button, that text content can then be used as a name for the button, which is then announced: \"Send Message, Button\" by VoiceOver.`}</p>\n    <p>{`You can inspect the button below yourself and check the accessible name in the devtools, and fire up your screen reader of choice to see how it is announced.`}</p>\n    <p>{`Now, what happens when we have an icon inside the button?`}</p>\n    <h2>{`Icon Sitting Next to Text`}</h2>\n    <p>{`This post is about icon-only buttons. But it’s worth starting with buttons that contain an icon sitting next to some text.`}</p>\n    <p>{`When a button contains text, that text is going to be used to create an accessible name for the button. That text should usually be enough to convey what the button does to screen readers.`}</p>\n    <p>{`As such, the icon itself (an svg image) could become irrelevant to screen reader users, as it does not clarify or add to the accessible name of the button. As such, the common practice is to hide it from screen readers using aria-hidden:`}</p>\n    <p>{`Code Block`}</p>\n    <p>{`The aria-hidden attribute is used to indicate whether an element is exposed to screen readers or not. When set to “true”, the element and its contents are hidden from the accessibility API, regardless of whether or not it is visually displayed.`}</p>\n    <p>{`The svg also has a focusable attribute set to false which prevents the icon itself from receiving focus in IE, because otherwise the button will have two Tab stops, which is not the expected or desired behavior.`}</p>\n\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;"}}