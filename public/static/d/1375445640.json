{"data":{"mdx":{"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accessible Icon Buttons\",\n  \"slug\": \"writing/accessible-icon-buttons\",\n  \"tags\": \"Javascript Markup\",\n  \"published\": \"5 July 2019\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(DefaultPara, {\n    className: \"intropara-writing\",\n    extend: {\n      fontSize: \"3rem\"\n    },\n    mdxType: \"DefaultPara\"\n  }, mdx(\"span\", {\n    className: \"initial-letter\"\n  }, \"R\"), \"ecently, I found\", \" \", mdx(Anchor, {\n    href: \"/\",\n    className: \"text-highlight\",\n    extend: {\n      fontSize: \"3rem\"\n    },\n    mdxType: \"Anchor\"\n  }, \"Steve on Twitter\"), \" \", \"and saw how he was sharing design tips targeted at developers with no design background, I followed him in the blink of an eye. I'm not exaggerating when I say that he was one of my best follows in 2018. A book that contained all the useful tips he was sharing, the way he was sharing them, would have been a box full of gems.\"), mdx(QuotePara, {\n    mdxType: \"QuotePara\"\n  }, \"A button is announced to screen readers as a button when the proper element \\u2014 the almighty button is used\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"Putting aside the UX side of the coin and whether or not an icon alone is enough to convey meaning and functionality to users, many implementations of these buttons today lack the proper accessibility that makes them meaningful to users of assistive technologies.\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"While the seemingly popular aria-label is a perfectly valid way to add an accessible name to a button (and/or other components), it is certainly not the only way, let alone the best. You could always just put text in it, for example. But what if the designer or the UI enforces the absence of visual text next to an icon?\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"There is a handful of ways that an icon button can be implemented accessibly. This article is an overview of them all.\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"A button is announced to screen readers as a button when the proper element \\u2014 the almighty button is used, or when an element has a role = \\\"button\\\" on it. Either way, when a button is announced as one, users expect to be able to interact with it in a certain way, which includes being able to activate the button using either the ENTER or SPACE keys.\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"This means that if you choose not to use the native button element, you\\u2019ll need to reimplement that native behavior and functionality yourself using JavaScript. But who would want to create a brittle implementation of features that are provided to them by default by the browser when they can save both time and effort using a simple button, right? ;)\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"To inspect what the accessible name of a button is and, therefore, how it will be announced by a screen reader, you can use the Chrome devtools. Next to the Style tab, you\\u2019ll find an \\u201CAccessibility\\u201C tab, inside which you will find something that looks like this:\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"The accessible name for the button can be defined in several ways, as you can see in the image above. When you put plain text inside the button, that text content can then be used as a name for the button, which is then announced: \\\"Send Message, Button\\\" by VoiceOver.\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"You can inspect the button below yourself and check the accessible name in the devtools, and fire up your screen reader of choice to see how it is announced.\"), mdx(DefaultPara, {\n    className: \"defaultpara-writing\",\n    mdxType: \"DefaultPara\"\n  }, \"Now, what happens when we have an icon inside the button?\"), mdx(CodePara, {\n    mdxType: \"CodePara\"\n  }, \"onSubmit(e) {\\n    e.preventDefault();\\n    const job = {\\n        title: 'Developer',\\n        company: 'Facebook' \\n    };\\n}\\n\"));\n}\nMDXContent.isMDXComponent = true;"}}}}